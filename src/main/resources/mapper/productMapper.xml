<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="tb_product">

    <!--상품찾기는 재고가 아니라 상품status가 중요. 왜냐면 재고 따라서 상품상태 변경할 것이기 때문.-->
    <!--상품 찾을 때 재고가 0인건
    상품의 재고가 0인 상품을 찾는다(재고 테이블에서)  ->  해당 상품의 상태를 재고관리 y이면 일시품절로 바꾼다. n면 완전품절로 바꾼다.     )
     -->

    <!-- 상품코드로 상품찾기 (상품상세용)-->
    <select id="select_product_by_prod_cd" parameterType="Long" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE prod_cd = #{prod_cd}  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
    </select>

    <!-- 상품코드로 상품찾기 (TDD용 상품코드만 있으면 됨)-->
    <select id="select_product_by_prod_cd_for_TDD" parameterType="Long" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE prod_cd = #{prod_cd}
    </select>

    <!-- 상품코드로 상품찾기 (관리자용)-->
    <select id="select_product_by_prod_cd_for_mng" parameterType="Long" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE prod_cd = #{prod_cd}  AND del_yn='n'
    </select>

    <!-- 카테고리 분류코드로 상품리스트 받기 (상품 객체 전체값) -->
    <select id="select_product_list_by_cate_cd" parameterType="String" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE cate_cd LIKE concat( #{cate_cd},'%') AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
    </select>

    <!-- 카테고리 분류코드로 상품리스트 받기 (옵션용이라서 옵션 y 만!! )(상품 코드만) -->
    <select id="select_product_prod_cd_list_by_cate_cd" parameterType="String" resultType="Long">
        SELECT prod_cd
        FROM tb_product
        WHERE cate_cd LIKE concat( #{cate_cd},'%') AND sale_yn='y' AND opt_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
    </select>



    <!-- ~~~~~ 카테고리 정렬기준 따라 호출하는 쿼리문 ~~~~~ -->

    <!-- 카테고리 분류코드로 상품리스트 받기 (mini), 전체 카테고리 리스트에 출력되는 값만.-->
    <select id="select_product_list_cate_cd_mini" parameterType="String" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM tb_product
        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
    </select>

    <!--낮은 가격 순-->
    <select id="select_product_list_cate_cd_mini_lowprc" parameterType="String" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM tb_product USE INDEX (tb_product_sale_prc_index)
        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
        ORDER BY sale_prc
    </select>


    <!--높은 가격 순-->
    <select id="select_product_list_cate_cd_mini_highprc" parameterType="String" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM tb_product USE INDEX (tb_product_sale_prc_index)
        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
        ORDER BY sale_prc desc
    </select>

    <!--최근 등록 순-->
    <select id="select_product_list_cate_cd_mini_new" parameterType="String" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM tb_product USE INDEX (tb_product_fst_reg_dt_index)
        WHERE cate_cd LIKE CONCAT(#{cate_cd}, '%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
        ORDER BY fst_reg_dt DESC
    </select>

    <!--할인율 높은 순-->
    <select id="select_product_list_cate_cd_mini_dc_rate" parameterType="String" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM tb_product USE INDEX (tb_product_fst_reg_dt_index)
        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
        ORDER BY dc_rate desc
    </select>

    <!--후기 많은 순 , 판매량 순 이후에 추가할 수 있음-->
<!--    <select id="select_product_list_cate_cd_mini_reivew" parameterType="String" resultType="ProductDto">-->
<!--        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc-->
<!--        FROM tb_product-->
<!--        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)-->
<!--        ORDER BY fst_reg_dt desc-->
<!--    </select>-->

    <!--메인상품 [empl]-->
    <select id="select_5_product_main_empl" resultType="ProductDto">
        SELECT pd.prod_cd, pd.dc_cd, pd.name, pd.cnsmr_prc, pd.sale_prc, pd.sfkp_stus, pd.dc_rate
        FROM main_product_common_view as pd
        WHERE pd.prod_cd IN (SELECT prv.prod_cd
                             FROM tb_product_review as prv
                             GROUP BY prv.prod_cd
                             HAVING COUNT(*) >= 20)
        LIMIT 5
    </select>


    <!--메인상품 [health]-->
    <select id="select_5_product_main_health" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM main_product_common_view
        WHERE cate_cd = '0101'
        ORDER BY fst_reg_dt DESC
        LIMIT 5
    </select>

    <!--메인상품 [eat]-->
    <select id="select_5_product_main_eat" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM main_product_common_view
        WHERE cate_cd LIKE '05%' OR cate_cd LIKE '02%'
        ORDER BY fst_reg_dt DESC
        LIMIT 5
    </select>

    <!--empl, health, eat 에서 공통적인 부분으로 뽑아낸 뷰 생성해서 사용함.
        CREATE VIEW main_product_common_view AS
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate, cate_cd, fst_reg_dt
        FROM tb_product
        WHERE sale_yn = 'y' AND dp_yn = 'y' AND del_yn = 'n' AND prod_stus IN (1, 2) AND opt_yn = 'n';
-->

        <!--메인상품 [home]-->
    <select id="select_5_product_main_home" resultType="ProductDto">
        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate
        FROM tb_product
        WHERE cate_cd LIKE '06%'
        ORDER BY fst_reg_dt desc
        LIMIT 5
    </select>


<!--    &lt;!&ndash;메인상품 [home]&ndash;&gt;-->
<!--    <select id="select_5_product_main_home" resultType="ProductDto">-->
<!--        SELECT prod_cd, dc_cd, name, cnsmr_prc, sale_prc, sfkp_stus, dc_rate-->
<!--        FROM tb_product USE INDEX (tb_product_fst_reg_dt_index)-->
<!--        WHERE opt_yn = 'y' AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)-->
<!--        ORDER BY fst_reg_dt desc-->
<!--        LIMIT 5-->
<!--    </select>-->





    <!-- ~~~~~ 카테고리 정렬기준 따라 호출하는 쿼리문(끝) ~~~~~ -->

<!-- 컨트롤러는 흐름 서비스에서 준 결과로만, 서비스는 비즈니스 -->

<!--    &lt;!&ndash; 분류코드로 상품리스트 받기 "코드_%" + 판매가격 낮은 순&ndash;&gt; &lt;!&ndash;하드코딩.. 이게 맞아? &ndash;&gt;-->
<!--    <select id="select_product_list_cate_cd__Cheap" parameterType="String" resultType="ProductDto">-->
<!--        SELECT *-->
<!--        FROM tb_product-->
<!--        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)-->
<!--        ORDER By sale_prc-->
<!--    </select>-->


    <!-- 이름으로 상품 검색하기 LIKE "%단어% -->
    <select id="search_by_name" parameterType="String" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE name LIKE concat( '%', #{name},'%')  AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
    </select>

    <!--새 상품 추가하기-->
    <insert id="insert_product" parameterType="ProductDto" >
        INSERT INTO tb_product (cate_cd, prod_stus, cust_cd, dc_cd, name, mng_prod_nm, sfkp_stus, sfkp_mtd, sp_prc,
                                cnsmr_prc, sale_prc, dc_rate, mgn_rate, dscpt, detail, min_qty, weight, stnd, orplc, recipe,
                                mtd, distb_tlmt, vld_start_dt, vld_end_dt, mng, fst_reg_dt, sale_yn, dp_yn,
                                del_yn, inv_yn, opt_yn, rmk, in_dtm, in_id, up_dtm, up_id)
        VALUES (#{cate_cd}, #{prod_stus}, #{cust_cd}, #{dc_cd}, #{name}, #{mng_prod_nm}, #{sfkp_stus}, #{sfkp_mtd},
                #{sp_prc}, #{cnsmr_prc}, #{sale_prc}, #{dc_rate}, #{mgn_rate}, #{dscpt}, #{detail}, #{min_qty}, #{weight},
                #{stnd}, #{orplc}, #{recipe}, #{mtd}, #{distb_tlmt}, #{vld_start_dt}, #{vld_end_dt}, #{mng},
                now(), #{sale_yn}, #{dp_yn}, #{del_yn}, #{inv_yn}, #{opt_yn}, #{rmk}, now(),
                #{in_id},  now(), #{up_id})
    </insert>

    <!-- 상품 정보 수정하기 -->
    <update id="update_product" parameterType="ProductDto" >
        UPDATE tb_product
        SET cate_cd=#{cate_cd}, prod_stus=#{prod_stus}, cust_cd=#{cust_cd}, dc_cd=#{dc_cd}, name=#{name},
            mng_prod_nm=#{mng_prod_nm}, sfkp_stus=#{sfkp_stus}, sfkp_mtd=#{sfkp_mtd}, sp_prc=#{sp_prc},
            cnsmr_prc=#{cnsmr_prc}, sale_prc=#{sale_prc}, dc_rate=#{dc_rate}, mgn_rate=#{mgn_rate}, dscpt=#{dscpt}, detail=#{detail},
            min_qty=#{min_qty}, weight=#{weight}, stnd=#{stnd}, orplc=#{orplc}, recipe=#{recipe}, mtd=#{mtd},
            distb_tlmt=#{distb_tlmt}, vld_start_dt=#{vld_start_dt}, vld_end_dt=#{vld_end_dt}, mng=#{mng}, fst_reg_dt=#{fst_reg_dt},
            sale_yn=#{sale_yn}, dp_yn=#{dp_yn}, del_yn=#{del_yn}, inv_yn=#{inv_yn}, opt_yn=#{opt_yn}, rmk=#{rmk}, up_dtm=now(), up_id='ezmeal'
        WHERE prod_cd=#{prod_cd}
    </update>

    <!--매일 04시 수량 비교 후 상태코드 업데이트-->   <!--  new  -->
    <update id="update_all_product_status" >
        UPDATE tb_product p
            JOIN tb_product_inventory i ON p.prod_cd = i.prod_cd
        SET p.prod_stus =
            CASE
                WHEN i.curr_inv > i.safe_inv THEN 1  -- 충분
                WHEN i.curr_inv > 0 THEN 2                -- 품절임박
                ELSE 3                                          -- 품절
            END,
            p.up_dtm = now(),
            p.up_id = 'inv_team'
        WHERE p.del_yn = 'n'
    </update>

    <!--주문시 다 사서 0 되었을 때 해당 상품코드만 상태 '품절'로 수정-->   <!--  new  -->
    <update id="update_product_status_to_temp_soldout"  parameterType="Long">
        UPDATE tb_product
        SET prod_stus = 3 , up_dtm=now(), up_id='inv_team'    -- 품절
        WHERE prod_cd=#{prod_cd}
    </update>


    <!--진열중, 판매중인데 상태코드가 2,3 인것의 상품코드만 출력하기--> <!--찾아서 입고주문해야지-->   <!--  new  -->
    <select id="select_prod_inv_danger" >
        SELECT prod_cd
        FROM tb_product
        WHERE prod_stus IN (2,3)
    </select>


    <!-- 상품코드 제일 큰것 -->
    <select id="select_max_prod_cd" resultType="Long">
        SELECT Max(prod_cd)
        FROM tb_product
    </select>
    <!-- Max가 for문 하나라 더 좋다-->

    <!-- 임시로 쓰는 삭제문 -->
    <delete id="delete_for_TDD" parameterType="Long" >
        DELETE
        FROM tb_product
        WHERE prod_cd = #{prod_cd}
    </delete>

    <!-- DB적인 삭제문 -->
    <update id="delete_Product_del_y" parameterType="Long"  >
        UPDATE tb_product
        SET sale_yn='y' and dp_yn='y' and del_yn='y'
        WHERE prod_cd = #{prod_cd}
    </update>


    <!-- 카테고리별 개수 세기 -->
    <select id="count_cate_cd" resultType="Map">
        SELECT cate_cd, count(*)
        FROM tb_product
        WHERE sale_yn='y' AND dp_yn='y' AND del_yn='n'
        GROUP BY cate_cd
    </select>


    <!-- [신상품 (등록일이 1달 이내인 것 ) ] -->
    <select id="fst_reg_dt_in_month" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE fst_reg_dt >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
          AND sale_yn = 'y' AND dp_yn = 'y' AND del_yn = 'n' AND NOT cate_cd LIKE '01%'
        ORDER BY fst_reg_dt desc
    </select>

    <!-- [베스트 (리뷰수 n개 이상) ] 지금은 3개 이상-->
    <select id="best_prod_review_count_higher" resultType="ProductDto">
        SELECT *
        FROM tb_product as prod
        WHERE sale_yn='y' AND dp_yn='y' AND del_yn='n'
          AND prod.prod_cd IN (SELECT revw.prod_cd
                               FROM tb_product_review as revw
                               GROUP BY revw.prod_cd
                               HAVING count(revw.prod_cd) >= 3)
    </select>

    <!-- [특가혜택 (카테고리가 06으로 시작) ] -->
    <select id="prodset_big_dc" resultType="ProductDto">
    SELECT *
    FROM tb_product
    WHERE cate_cd LIKE '06%' AND sale_yn='y' AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2)
    </select>



    <!--  관리자 상품 리스트용 전체 상품 리스트   -->
    <select id="all_prod_list_fot_mng" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE del_yn='n'
        ORDER BY fst_reg_dt desc
        Limit 30
    </select>

<!--//필요한 값은 DB안에서 다 처리해서 나가기 (여러 함수나 SQL메서드를 사용해야 쎄보임!! 뭘좀 아는구나 ㅋㅋ good 구린건 안돼!! )-->

<!--면접관이 보는 부분: 맵퍼, 컨트롤러 처리, 얼마나 깔끔한지-->
<!--지원 회사 같은건 원장님께 조언얻기-->


        <!--  위시리스트용 전체 상품 리스트   -->
    <select id="all_prod_list_fot_wishList" resultType="ProductDto">
        SELECT *
        FROM tb_product
    </select>

</mapper>
