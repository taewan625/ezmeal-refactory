<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="tb_product_review">

    <!-- 해당 상품의 상품 리뷰 select 하기 -->
    <!-- 한 회원의 리뷰 모아보기 -->
    <select id="get_all_member_review" parameterType="Long"  resultType="ProductReviewDto">
        SELECT *
        FROM tb_product_review
        WHERE mbr_id = #{mbr_id} AND del_yn = 'n'
        ORDER BY wrt_dt DESC
    </select>

    <!-- 한 회원의 1개 꺼내기 -->
    <select id="get_one_review" parameterType="Map"  resultType="ProductReviewDto">
        SELECT *
        FROM tb_product_review
        WHERE revw_id=#{revw_id} AND mbr_id = #{mbr_id} AND del_yn = 'n'
    </select>

    <!-- 가장 최근 생성된 리뷰 -->
    <select id="get_last_insert_review" resultType="ProductReviewDto">
        SELECT *
        FROM tb_product_review
        WHERE revw_id = (SELECT MAX(revw_id)
                         FROM tb_product_review)
    </select>

    <!--찐 삭제(관리자용/TDD용)-->
    <delete id="delete_my_review_for_tdd" parameterType="Long"  >
        DELETE
        FROM tb_product_review
        WHERE revw_id = #{revw_id}
    </delete>

    <!--가짜 삭제-->
    <update id="delete_my_review_del_y" parameterType="Map" >
        UPDATE tb_product_review
        SET del_yn = 'y', up_dtm = now()
        WHERE revw_id = #{revw_id} AND mbr_id = #{mbr_id}
    </update>

    <!--리뷰 생성-->
    <insert id="insertProductReview" parameterType="ProductReviewDto">
        INSERT INTO tb_product_review (ord_id, mbr_id, prod_cd, writer, title, stmt, dlvry_cmpl_dt, revw_posbl_dt, wrt_dt,
                                       thumb, star, revw_opub_yn, del_yn, in_dtm, in_id, up_dtm, up_id)
        VALUES (#{ord_id}, #{mbr_id}, #{prod_cd}, #{writer}, #{title}, #{stmt}, #{dlvry_cmpl_dt}, #{revw_posbl_dt}, #{wrt_dt},
                #{thumb}, #{star}, #{revw_opub_yn}, #{del_yn}, now(), 'ateam', now(), 'ateam')
    </insert>


    <!--리뷰 수정하기  (배송완료날짜~+1달까지만 가능)  -->
    <update id="update_review" parameterType="ProductReviewDto" >
        UPDATE tb_product_review
        SET title=#{title}, stmt=#{stmt}, wrt_dt=#{wrt_dt}, star=#{star}, revw_opub_yn=#{revw_opub_yn},
            del_yn=#{del_yn}, up_dtm = now()
        WHERE revw_id = #{revw_id} AND mbr_id = #{mbr_id} AND now() between dlvry_cmpl_dt AND DATE_ADD(dlvry_cmpl_dt, INTERVAL 1 MONTH)
    </update>


    <!--리뷰 공개여부 변경하기  -->
    <update id="update_review_open_yn" parameterType="Map" >
        UPDATE tb_product_review
        SET revw_opub_yn = #{revw_opub_yn}, up_dtm = now()
        WHERE revw_id = #{revw_id} AND mbr_id = #{mbr_id}
    </update>

    <!--도움돼요 증감 반영(수정)하기--> <!--도움되요 누를때마다 DB에 업데이트 하면 무리가니까 다른 페이지로 이동 할 때 반영하도록 함. 그런데 어떤 사용자가 도움돼요 눌렀는지
    기록되어야함. 그래야 나중에 도움되요 취소 가능...엥???--> <!--이건 안되겠다... 나중에 통계용 TB를 따로 만들거나 해야할듯-->

    <!--1개의 상품코드에 대한 리뷰 숫자 가져오기-->
    <select id="get_review_count" parameterType="Long"  resultType="int">
        SELECT count(*)
        FROM tb_product_review
        WHERE prod_cd = #{prod_cd}
    </select>

    <!--1개의 상품코드에 대한 리뷰 별점 평균 가져오기-->
    <select id="get_review_average"  parameterType="Long"   resultType="Double">
        SELECT Round(avg(star),1)
        FROM tb_product_review
        WHERE prod_cd = #{prod_cd}
        GROUP BY prod_cd
    </select>

    <!--1개의 상품에 대한 리뷰 전체 가져오기 (공개-y,삭제-n)-->
    <select id="get_all_review_by_prod_cd"  parameterType="Long"   resultType="ProductReviewDto">
        SELECT *
        FROM tb_product_review
        WHERE prod_cd = #{prod_cd} AND revw_opub_yn='y' AND del_yn='n'
        ORDER BY revw_id desc
        Limit 5
    </select>

    <!--해당 카테고리에 있는 별점 평균 받아오기 Map(prod_cd , round(avg(star),1))-->
    <select id="get_review_average_for_cate_list"  parameterType="String"   resultType="Map">
        select prod_cd, Round(avg(star),1) as avg
        from tb_product_review
        where prod_cd In (select prod_cd
                          from tb_product
                          where cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y'
                                AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2))

        GROUP BY prod_cd
    </select>

    <!--해당 카테고리에 있는 리뷰 총개수 받아오기 Map(prod_cd , count(*))-->
    <select id="get_review_count_for_cate_list"  parameterType="String"   resultType="Map">
        select prod_cd, count(*) as count
        from tb_product_review
        where prod_cd In (select prod_cd
                          from tb_product
                          where cate_cd LIKE concat(#{cate_cd}, '%')  AND sale_yn='y'
                            AND dp_yn='y' AND del_yn='n' AND prod_stus IN (1,2))
        GROUP BY prod_cd
    </select>



    <!--모든 상품에 대해서 평균 / 리뷰수 가져오기-->
    <!--해당 카테고리에 있는 별점 평균 받아오기 List로(prod_cd , round(avg(star),1))-->
    <select id="get_review_average_all"  resultType="ProductReviewTotalDto">
        SELECT prod_cd, Round(avg(star),1) as rvAvg
        FROM tb_product_review
        WHERE del_yn='n'
        GROUP BY prod_cd
    </select>

    <!--해당 카테고리에 있는 리뷰 총개수 받아오기 Map(prod_cd , count(*))-->
    <select id="get_review_count_all"  resultType="ProductReviewTotalDto">
        SELECT prod_cd, count(*) as rvCnt
        FROM tb_product_review
        WHERE del_yn='n'
        GROUP BY prod_cd
    </select>

    <!-- taewan -->
    <!--리뷰 생성-->
<!--    todo logic 깔끔하게 해서 writer 다시 받아오기-->
    <insert id="insert_mini_review_from_orderDetail" parameterType="ProductReviewDto">
        INSERT INTO tb_product_review (ord_id, ord_prod_dtl_id, title, stmt,star, mbr_id,
                                       prod_cd, writer, wrt_dt, revw_opub_yn)
        VALUES (#{ord_id}, #{ord_prod_dtl_id},  #{title}, #{stmt}, #{star}, #{mbr_id},
                #{prod_cd}, '강*호', CURDATE(), 'y')
    </insert>

</mapper>